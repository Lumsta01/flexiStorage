AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for Storage Facilities

Globals:
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 100
    Tracing: Active

Resources:
  StorageFacilitiesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: storage-facilities-images-2024

  StorageFacilitiesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Facilities
      AttributeDefinitions:
        - AttributeName: facility_id
          AttributeType: S
      KeySchema:
        - AttributeName: facility_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  StorageFacilitiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: storage_facilities.lambda_handler
      Environment:
        Variables:
          FACILITIES_TABLE: !Ref StorageFacilitiesTable
          S3_BUCKET_NAME: !Ref StorageFacilitiesBucket
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:DeleteItem
              Resource: !GetAtt StorageFacilitiesTable.Arn
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:ListBucket
              Resource:
                - !Sub arn:aws:s3:::${StorageFacilitiesBucket}
                - !Sub arn:aws:s3:::${StorageFacilitiesBucket}/*
      Events:
        GetFacilities:
          Type: Api
          Properties:
            RestApiId: !Ref FacilitiesApi
            Path: /facilities
            Method: GET
        SearchFacilities:
          Type: Api
          Properties:
            RestApiId: !Ref FacilitiesApi
            Path: /facilities/search
            Method: GET
        StorageFacilitiesPost:
          Type: Api
          Properties:
            RestApiId: !Ref FacilitiesApi
            Path: /facilities
            Method: POST
        DeleteFacility:
          Type: Api
          Properties:
            RestApiId: !Ref FacilitiesApi
            Path: /facilities/{facility_id}
            Method: DELETE

  FacilitiesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${FacilitiesApi}.execute-api.${AWS::Region}.amazonaws.com/prod'

  getFacilitiesApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${FacilitiesApi}.execute-api.${AWS::Region}.amazonaws.com/prod/facilities'

  deleteFacilityApiEndpoint:
    Description: API Gateway endpoint URL for DELETE /facilities/{facility_id}
    Value: !Sub 'https://${FacilitiesApi}.execute-api.${AWS::Region}.amazonaws.com/prod/facilities/{facility_id}'
  

  StorageFacilitiesTable:
    Description: DynamoDB Storage Facilities Table
    Value: !Ref StorageFacilitiesTable

  StorageFacilitiesFunction:
    Description: Lambda Function for Storage Facilities
    Value: !Ref StorageFacilitiesFunction

  S3BucketName:
    Description: "S3 bucket where images are stored"
    Value: !Ref StorageFacilitiesBucket

  S3BucketURL:
    Description: "URL of the S3 bucket"
    Value: !Sub "https://s3.amazonaws.com/${StorageFacilitiesBucket}"